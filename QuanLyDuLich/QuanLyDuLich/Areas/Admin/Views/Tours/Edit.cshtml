@model QuanLyDuLich.Models.Tour

@{
    ViewBag.Title = "Edit";
    Layout = "~/Areas/Admin/Views/Shared/_MainLayoutAdmin.cshtml";
}

@section HeadLinks{
    <link href="assets/vendors/select2/select2.css" rel="stylesheet" />
}

@section PageTitle{
    Chỉnh sửa thông tin Tour
}

<h2>Chỉnh sửa thông tin </h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Tour</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.id_tour)

        <div class="form-group">
            <label class="font-weight-semibold">Tên tour:</label>
            @*@Html.LabelFor(model => model.tour_name, htmlAttributes: new { @class = "control-label col-md-2" })*@
            <div class="col-md-10">
                @Html.EditorFor(model => model.tour_name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.tour_name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="font-weight-semibold">Mô tả Tour:</label>
            @*@Html.LabelFor(model => model.tour_description, htmlAttributes: new { @class = "control-label col-md-2" })*@
            <div class="col-md-10">
                @Html.EditorFor(model => model.tour_description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.tour_description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="font-weight-semibold">Lịch trình:</label>
            @*@Html.LabelFor(model => model.tour_schedule, htmlAttributes: new { @class = "control-label col-md-2" })*@
            <div class="col-md-10">
                @Html.EditorFor(model => model.tour_schedule, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.tour_schedule, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="row">
                <div class="col">
                    <label class="font-weight-semibold">Giá của Tour:</label>
                    @*@Html.LabelFor(model => model.price, htmlAttributes: new { @class = "control-label col-md-2" })*@
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.price, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.price, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col">
                    <label class="font-weight-semibold">Số lượng:</label>
                    @*@Html.LabelFor(model => model.quantity, htmlAttributes: new { @class = "control-label col-md-2" })*@
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.quantity, new { htmlAttributes = new { @class = "form-control", @id = "quantity" } })
                        @Html.ValidationMessageFor(model => model.quantity, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>

        <div class="form-group">
            <label class="font-weight-semibold">Trạng thái:</label>
            @*@Html.LabelFor(model => model.status, htmlAttributes: new { @class = "control-label col-md-2" })*@
            <div class="col-md-10">
                @Html.EditorFor(model => model.status, new { htmlAttributes = new { @class = "form-control", @id = "status" } })
                @Html.ValidationMessageFor(model => model.status, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="font-weight-semibold">Thời gian của Tour:</label>
            <div class="row">
                <div class="col">
                    <span class="p-h-10">Đi:</span>
                    @Html.EditorFor(model => model.departure_time, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.departure_time, "", new { @class = "text-danger" })
                </div>
                <div class="col">
                    <span class="p-h-10">Về:</span>
                    @Html.EditorFor(model => model.return_time, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.return_time, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col">
                <label class="font-weight-semibold">Nơi khởi hành:</label>
                @*@Html.LabelFor(model => model.departure_location, htmlAttributes: new { @class = "control-label col-md-2" })*@
                <div class="col-md-10">
                    @Html.EditorFor(model => model.departure_location, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.departure_location, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col">
                <label class="font-weight-semibold">Địa điểm du lịch:</label>
                @*@Html.LabelFor(model => model.arrival_location, htmlAttributes: new { @class = "control-label col-md-2" })*@
                <div class="col-md-10">
                    @Html.EditorFor(model => model.arrival_location, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.arrival_location, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        @*<div class="form-group">
                @Html.LabelFor(model => model.departure_time, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.departure_time, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.departure_time, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.return_time, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.return_time, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.return_time, "", new { @class = "text-danger" })
                </div>
            </div>*@

        @*<div class="form-group">
                @Html.LabelFor(model => model.departure_location, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.departure_location, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.departure_location, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.arrival_location, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.arrival_location, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.arrival_location, "", new { @class = "text-danger" })
                </div>
            </div>*@

        @*<div class="form-group">
                @Html.LabelFor(model => model.image, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.image, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.image, "", new { @class = "text-danger" })
                </div>
            </div>*@

        <div class="form-group">

            <label class="control-label col-md-2 font-weight-semibold" for="image">Hình ảnh:</label>
            <div class="custom-file col-md-10">
                <input name="Image" type="file" class="form-control custom-file-input" id="thumbnailFile" accept="image/*">
                <label class="custom-file-label" for="thumbnailFile">Choose avatar</label>
            </div>
            <div id="uploadSuccessNotification" style="display: none;">
                + Thumbnail uploaded successfully!
            </div>
            <img id="thumbnailPreview" src="#" alt="Thumbnail preview" style="display:none; max-width:100%">
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.is_active, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.is_active)
                    @Html.ValidationMessageFor(model => model.is_active, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" id="submitBtn" value="Save" class="btn btn-primary" />
            </div>
        </div>
    </div>
}


<div>
    @Html.ActionLink("Back to List", "TourList")
</div>


<script>
    const thumbnailInput = document.getElementById('thumbnailFile');
    const thumbnailPreview = document.getElementById('thumbnailPreview');
    thumbnailInput.addEventListener('change', function () {
        const file = this.files[0];
        if (file) {
            const reader = new FileReader();
            reader.addEventListener('load', function () {
                thumbnailPreview.src = this.result;
                thumbnailPreview.style.display = 'block';
                thumbnailPreview.style.maxWidth = "100px";
                document.getElementById('uploadSuccessNotification').style.display = 'block';
            });
            reader.readAsDataURL(file);
        }
    });

    const statusEl = document.querySelector('#status');
    const quantityEl = document.querySelector('#quantity');
    const submitBtn = document.querySelector('#submitBtn');

    submitBtn.addEventListener('click', function () {
        const quantity = parseInt(quantityEl.value);
        if (quantity === 0) {
            statusEl.value = "Out of Stock";
            console.log("Số lượng = 0 thì hết hàng");
        }
        else if (quantity != 0) {
            statusEl.value = "In Stock";
            console.log("Số lượng > 0 thì còn hàng");
        }

    });



</script>